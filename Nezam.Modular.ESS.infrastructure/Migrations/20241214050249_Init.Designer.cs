// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nezam.Modular.ESS.Infrastructure.Data;

#nullable disable

namespace Nezam.Modular.ESS.Infrastructure.Migrations
{
    [DbContext(typeof(AppDbContext))]
    [Migration("20241214050249_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.Roles.RoleEntity", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT")
                        .HasColumnName("RoleId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("UserId");

                    b.ToTable("Users");

                    b.UseTptMappingStrategy();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.User.UserVerificationTokenEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerificationTokens");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentActivityLogEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<DateTime>("ActivityDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DocumentId");

                    b.Property<string>("Key")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentActivityLogs");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAggregateRoot", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<string>("Content")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid>("OwnerUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("OwnerUserId");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasMaxLength(255)
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("OwnerUserId");

                    b.ToTable("Documents", (string)null);
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAttachmentEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DocumentId");

                    b.Property<string>("FileName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("FilePath")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<long>("FileSize")
                        .HasColumnType("INTEGER");

                    b.Property<string>("FileType")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime>("UploadDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentAttachments");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentReferralEntity", b =>
                {
                    b.Property<Guid>("Id")
                        .HasColumnType("TEXT")
                        .HasColumnName("Id");

                    b.Property<Guid>("DocumentId")
                        .HasColumnType("TEXT")
                        .HasColumnName("DocumentId");

                    b.Property<Guid?>("ParentReferralId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ParentReferralId");

                    b.Property<Guid>("ReceiverUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReceiverUserId");

                    b.Property<DateTime>("ReferralDate")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("ReferrerUserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("ReferrerUserId");

                    b.Property<DateTime?>("RespondedDate")
                        .HasColumnType("TEXT");

                    b.Property<string>("ResponseContent")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<DateTime?>("ViewedDate")
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.HasIndex("DocumentId");

                    b.ToTable("DocumentReferrals");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Units.Domain.Member.MemberEntity", b =>
                {
                    b.Property<Guid>("MemberId")
                        .HasColumnType("TEXT")
                        .HasColumnName("MemberId");

                    b.Property<string>("FirstName")
                        .HasColumnType("TEXT");

                    b.Property<string>("LastName")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UserId");

                    b.HasKey("MemberId");

                    b.ToTable("Members");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Units.Domain.Units.UnitEntity", b =>
                {
                    b.Property<Guid>("UnitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitId");

                    b.Property<string>("Description")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UnitId");

                    b.ToTable("Units");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Units.Domain.Units.UnitMemberEntity", b =>
                {
                    b.Property<Guid>("UnitMemberId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitMemberId");

                    b.Property<Guid>("MemberId")
                        .HasColumnType("TEXT")
                        .HasColumnName("MemberId");

                    b.Property<string>("Role")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<Guid?>("UnitEntityUnitId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UnitId")
                        .HasColumnType("TEXT")
                        .HasColumnName("UnitId");

                    b.HasKey("UnitMemberId");

                    b.HasIndex("UnitEntityUnitId");

                    b.ToTable("UnitMembers");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<string>("RolesRoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.Employer.EmployerEntity", b =>
                {
                    b.HasBaseType("Nezam.Modular.ESS.Identity.Domain.User.UserEntity");

                    b.Property<Guid>("EmployerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("EmployerId");

                    b.ToTable("Employers", (string)null);
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.Engineer.EngineerEntity", b =>
                {
                    b.HasBaseType("Nezam.Modular.ESS.Identity.Domain.User.UserEntity");

                    b.Property<Guid>("EngineerId")
                        .HasColumnType("TEXT")
                        .HasColumnName("EngineerId");

                    b.Property<string>("RegistrationNumber")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasIndex("RegistrationNumber")
                        .IsUnique();

                    b.ToTable("Engineers", (string)null);
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", b =>
                {
                    b.OwnsOne("Nezam.Modular.ESS.Identity.Domain.Shared.User.UserEmailValue", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserEntityUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");
                        });

                    b.OwnsOne("Nezam.Modular.ESS.Identity.Domain.Shared.User.UserNameValue", "UserName", b1 =>
                        {
                            b1.Property<Guid>("UserEntityUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("UserName");

                            b1.HasKey("UserEntityUserId");

                            b1.HasIndex("Value")
                                .IsUnique();

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");
                        });

                    b.OwnsOne("Nezam.Modular.ESS.Identity.Domain.Shared.User.UserPasswordValue", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserEntityUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Password");

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");
                        });

                    b.OwnsOne("Nezam.Modular.ESS.Identity.Domain.Shared.User.UserProfileValue", "Profile", b1 =>
                        {
                            b1.Property<Guid>("UserEntityUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Profile");

                    b.Navigation("UserName")
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.User.UserVerificationTokenEntity", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", "User")
                        .WithMany("VerificationTokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Nezam.Modular.ESS.Identity.Domain.User.UserVerificationTokenType", "Type", b1 =>
                        {
                            b1.Property<Guid>("UserVerificationTokenEntityId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER")
                                .HasColumnName("TypeId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("TypeName");

                            b1.HasKey("UserVerificationTokenEntityId");

                            b1.ToTable("UserVerificationTokens");

                            b1.WithOwner()
                                .HasForeignKey("UserVerificationTokenEntityId");
                        });

                    b.Navigation("Type")
                        .IsRequired();

                    b.Navigation("User");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentActivityLogEntity", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAggregateRoot", null)
                        .WithMany("ActivityLogs")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAggregateRoot", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", "OwnerUser")
                        .WithMany()
                        .HasForeignKey("OwnerUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Nezam.Modular.ESS.Secretariat.Domain.Shared.Documents.Enumerations.DocumentStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("DocumentAggregateRootId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER")
                                .HasColumnName("StatusId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("StatusName");

                            b1.HasKey("DocumentAggregateRootId");

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("DocumentAggregateRootId");
                        });

                    b.OwnsOne("Nezam.Modular.ESS.Secretariat.Domain.Shared.Documents.Enumerations.DocumentType", "Type", b1 =>
                        {
                            b1.Property<Guid>("DocumentAggregateRootId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER")
                                .HasColumnName("TypeId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("TypeName");

                            b1.HasKey("DocumentAggregateRootId");

                            b1.ToTable("Documents");

                            b1.WithOwner()
                                .HasForeignKey("DocumentAggregateRootId");
                        });

                    b.Navigation("OwnerUser");

                    b.Navigation("Status")
                        .IsRequired();

                    b.Navigation("Type")
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAttachmentEntity", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAggregateRoot", null)
                        .WithMany("Attachments")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentReferralEntity", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAggregateRoot", null)
                        .WithMany("Referrals")
                        .HasForeignKey("DocumentId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.OwnsOne("Nezam.Modular.ESS.Secretariat.Domain.Shared.Documents.Enumerations.ReferralStatus", "Status", b1 =>
                        {
                            b1.Property<Guid>("DocumentReferralEntityId")
                                .HasColumnType("TEXT");

                            b1.Property<int>("Id")
                                .HasColumnType("INTEGER")
                                .HasColumnName("StatusId");

                            b1.Property<string>("Name")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("StatusName");

                            b1.HasKey("DocumentReferralEntityId");

                            b1.ToTable("DocumentReferrals");

                            b1.WithOwner()
                                .HasForeignKey("DocumentReferralEntityId");
                        });

                    b.Navigation("Status")
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Units.Domain.Units.UnitMemberEntity", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Units.Domain.Units.UnitEntity", null)
                        .WithMany("UnitMembers")
                        .HasForeignKey("UnitEntityUnitId");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Identity.Domain.Roles.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.Employer.EmployerEntity", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("Nezam.Modular.ESS.Identity.Domain.Employer.EmployerEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.Engineer.EngineerEntity", b =>
                {
                    b.HasOne("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", null)
                        .WithOne()
                        .HasForeignKey("Nezam.Modular.ESS.Identity.Domain.Engineer.EngineerEntity", "UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Identity.Domain.User.UserEntity", b =>
                {
                    b.Navigation("VerificationTokens");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Secretariat.Domain.Documents.DocumentAggregateRoot", b =>
                {
                    b.Navigation("ActivityLogs");

                    b.Navigation("Attachments");

                    b.Navigation("Referrals");
                });

            modelBuilder.Entity("Nezam.Modular.ESS.Units.Domain.Units.UnitEntity", b =>
                {
                    b.Navigation("UnitMembers");
                });
#pragma warning restore 612, 618
        }
    }
}
