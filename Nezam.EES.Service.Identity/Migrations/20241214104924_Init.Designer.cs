// <auto-generated />
using System;
using Microsoft.EntityFrameworkCore;
using Microsoft.EntityFrameworkCore.Infrastructure;
using Microsoft.EntityFrameworkCore.Migrations;
using Microsoft.EntityFrameworkCore.Storage.ValueConversion;
using Nezam.EES.Service.Identity.Infrastructure.EntityFrameworkCore;

#nullable disable

namespace Nezam.EES.Slice.Identity.Migrations
{
    [DbContext(typeof(IdentityDbContext))]
    [Migration("20241214104924_Init")]
    partial class Init
    {
        /// <inheritdoc />
        protected override void BuildTargetModel(ModelBuilder modelBuilder)
        {
#pragma warning disable 612, 618
            modelBuilder.HasAnnotation("ProductVersion", "9.0.0");

            modelBuilder.Entity("Nezam.EES.Slice.Identity.Domains.Roles.RoleEntity", b =>
                {
                    b.Property<string>("RoleId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Title")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("RoleId");

                    b.ToTable("Roles");
                });

            modelBuilder.Entity("Nezam.EES.Slice.Identity.Domains.Users.UserEntity", b =>
                {
                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.Property<string>("UserName")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("UserId");

                    b.HasIndex("UserName")
                        .IsUnique();

                    b.ToTable("Users");
                });

            modelBuilder.Entity("Nezam.EES.Slice.Identity.Domains.Users.UserTokenEntity", b =>
                {
                    b.Property<Guid>("TokenId")
                        .HasColumnType("TEXT");

                    b.Property<string>("Token")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.Property<int>("TypeId")
                        .HasColumnType("INTEGER");

                    b.Property<Guid>("UserId")
                        .HasColumnType("TEXT");

                    b.HasKey("TokenId");

                    b.HasIndex("TypeId");

                    b.HasIndex("UserId");

                    b.ToTable("UserVerificationTokens");
                });

            modelBuilder.Entity("Nezam.EES.Slice.Identity.Domains.Users.UserVerificationTokenType", b =>
                {
                    b.Property<int>("Id")
                        .ValueGeneratedOnAdd()
                        .HasColumnType("INTEGER");

                    b.Property<string>("Name")
                        .IsRequired()
                        .HasColumnType("TEXT");

                    b.HasKey("Id");

                    b.ToTable("UserVerificationTokenType");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.Property<string>("RolesRoleId")
                        .HasColumnType("TEXT");

                    b.Property<Guid>("UsersUserId")
                        .HasColumnType("TEXT");

                    b.HasKey("RolesRoleId", "UsersUserId");

                    b.HasIndex("UsersUserId");

                    b.ToTable("UserRoles");
                });

            modelBuilder.Entity("Nezam.EES.Slice.Identity.Domains.Users.UserEntity", b =>
                {
                    b.OwnsOne("Nezam.EES.Shared.User.UserEmailValue", "Email", b1 =>
                        {
                            b1.Property<Guid>("UserEntityUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Email");

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");
                        });

                    b.OwnsOne("Nezam.EES.Shared.User.UserPasswordValue", "Password", b1 =>
                        {
                            b1.Property<Guid>("UserEntityUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("Value")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("Password");

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");
                        });

                    b.OwnsOne("Nezam.EES.Shared.User.UserProfileValue", "Profile", b1 =>
                        {
                            b1.Property<Guid>("UserEntityUserId")
                                .HasColumnType("TEXT");

                            b1.Property<string>("FirstName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("FirstName");

                            b1.Property<string>("LastName")
                                .IsRequired()
                                .HasColumnType("TEXT")
                                .HasColumnName("LastName");

                            b1.HasKey("UserEntityUserId");

                            b1.ToTable("Users");

                            b1.WithOwner()
                                .HasForeignKey("UserEntityUserId");
                        });

                    b.Navigation("Email");

                    b.Navigation("Password")
                        .IsRequired();

                    b.Navigation("Profile");
                });

            modelBuilder.Entity("Nezam.EES.Slice.Identity.Domains.Users.UserTokenEntity", b =>
                {
                    b.HasOne("Nezam.EES.Slice.Identity.Domains.Users.UserVerificationTokenType", "Type")
                        .WithMany()
                        .HasForeignKey("TypeId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nezam.EES.Slice.Identity.Domains.Users.UserEntity", "User")
                        .WithMany("Tokens")
                        .HasForeignKey("UserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.Navigation("Type");

                    b.Navigation("User");
                });

            modelBuilder.Entity("UserRoles", b =>
                {
                    b.HasOne("Nezam.EES.Slice.Identity.Domains.Roles.RoleEntity", null)
                        .WithMany()
                        .HasForeignKey("RolesRoleId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();

                    b.HasOne("Nezam.EES.Slice.Identity.Domains.Users.UserEntity", null)
                        .WithMany()
                        .HasForeignKey("UsersUserId")
                        .OnDelete(DeleteBehavior.Cascade)
                        .IsRequired();
                });

            modelBuilder.Entity("Nezam.EES.Slice.Identity.Domains.Users.UserEntity", b =>
                {
                    b.Navigation("Tokens");
                });
#pragma warning restore 612, 618
        }
    }
}
